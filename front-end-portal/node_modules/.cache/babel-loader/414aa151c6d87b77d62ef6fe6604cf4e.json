{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\component\\\\ListJobsComponent.jsx\";\n//  Component for listing all jobs\nimport React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport JobDataService from '../service/JobDataService';\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass ListJobsComponent extends Component {\n  constructor(props) {\n    super(props); //  To display jobs, need to make them available to the component. We add jobs to the state of the component and initialize it in the constructor.\n\n    this.state = {\n      jobs: [],\n      message: null\n    };\n    this.refreshJobs = this.refreshJobs.bind(this);\n    this.deleteJobClicked = this.deleteJobClicked.bind(this);\n    this.updateJobClicked = this.updateJobClicked.bind(this);\n    this.addJobClicked = this.addJobClicked.bind(this);\n  }\n\n  componentDidMount() {\n    //  React makes componentDidMount be called as soon as the component is mounted\n    this.refreshJobs(); //  Call refreshJobs\n  }\n\n  refreshJobs() {\n    JobDataService.retrieveAllJobs() //  Make call to the REST API\n    .then( //  Decide what to do once call is made succesfully\n    response => {\n      //console.log(response);\n      this.setState({\n        jobs: response.data\n      }); //  When response comes back with data, update the state.\n    }); //  .catch handles unsuccessful. Add later\n  }\n\n  deleteJobClicked(id) {\n    let userName = AuthenticationService.getLoggedUser(); //console.log(id + userName)\n\n    JobDataService.deleteJob(userName, id).then(response => {\n      console.log(response);\n      this.setState({\n        message: \"Succesfully deleted the job posting\"\n      });\n      this.refreshJobs();\n    });\n  }\n\n  updateJobClicked(id) {\n    //console.log('update ' + id)\n    this.props.history.push(\"/jobs/\".concat(id));\n  }\n\n  addJobClicked() {\n    React.createElement(Redirect, {\n      to: \"/jobs/create/-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"All Jobs\"), this.state.message && React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.addJobClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Add\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Employer\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Job Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Update\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Delete\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.jobs.map( //  map allows you to loop around items\n    job => //  a key is used to identify a row\n    React.createElement(\"tr\", {\n      key: job.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, job.employer), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, job.jobTitle), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, job.description), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.updateJobClicked(job.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Update\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.deleteJobClicked(job.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Delete\"))))))));\n  }\n\n}\n\nexport default ListJobsComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/ListJobsComponent.jsx"],"names":["React","Component","Route","Redirect","JobDataService","AuthenticationService","ListJobsComponent","constructor","props","state","jobs","message","refreshJobs","bind","deleteJobClicked","updateJobClicked","addJobClicked","componentDidMount","retrieveAllJobs","then","response","setState","data","id","userName","getLoggedUser","deleteJob","console","log","history","push","render","map","job","employer","jobTitle","description"],"mappings":"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","sourcesContent":["//  Component for listing all jobs\r\n\r\nimport React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nimport JobDataService from '../service/JobDataService';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass ListJobsComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n         //  To display jobs, need to make them available to the component. We add jobs to the state of the component and initialize it in the constructor.\r\n        this.state = { \r\n            jobs: [],\r\n            message: null,\r\n        }\r\n        this.refreshJobs = this.refreshJobs.bind(this)\r\n        this.deleteJobClicked = this.deleteJobClicked.bind(this)\r\n        this.updateJobClicked = this.updateJobClicked.bind(this)\r\n        this.addJobClicked = this.addJobClicked.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {   //  React makes componentDidMount be called as soon as the component is mounted\r\n        this.refreshJobs(); //  Call refreshJobs\r\n    }\r\n\r\n    refreshJobs() {\r\n        JobDataService.retrieveAllJobs()    //  Make call to the REST API\r\n            .then(  //  Decide what to do once call is made succesfully\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ jobs: response.data })  //  When response comes back with data, update the state.\r\n                }\r\n            )   //  .catch handles unsuccessful. Add later\r\n    }\r\n\r\n    deleteJobClicked(id) {\r\n        let userName = AuthenticationService.getLoggedUser()\r\n        //console.log(id + userName)\r\n        JobDataService.deleteJob(userName, id)\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ message: `Succesfully deleted the job posting` })\r\n                    this.refreshJobs()\r\n                }\r\n            )\r\n    }\r\n    updateJobClicked(id) {\r\n        //console.log('update ' + id)\r\n        this.props.history.push(`/jobs/${id}`)\r\n    }\r\n    addJobClicked() {\r\n        <Redirect to=\"/jobs/create/-1\"/>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>All Jobs</h3>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                <br></br>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addJobClicked}>Add</button>\r\n                    </div>\r\n                    <br></br>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Employer</th>\r\n                                <th>Job Title</th>\r\n                                <th>Description</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {   \r\n                                this.state.jobs.map(    //  map allows you to loop around items\r\n                                    job =>  //  a key is used to identify a row\r\n                                        <tr key={job.id}>\r\n                                            <td>{job.employer}</td>\r\n                                            <td>{job.jobTitle}</td>\r\n                                            <td>{job.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateJobClicked(job.id)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteJobClicked(job.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ListJobsComponent"]},"metadata":{},"sourceType":"module"}