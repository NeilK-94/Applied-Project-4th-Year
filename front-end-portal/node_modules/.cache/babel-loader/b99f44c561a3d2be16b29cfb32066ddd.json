{"ast":null,"code":"import axios from 'axios';\nconst BASIC_AUTH_API_URL = 'http://localhost:8080/basicauth';\n\nclass AuthenticationService {\n  //  Basic Authentication *********************************\n  executeBasicAuthenticationService(userName, password) {\n    return axios.get(\"\".concat(AUTH_API_URL), {\n      headers: {\n        authorization: this.createBasicAuthToken(userName, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(userName, password) {\n    //  Create standard authentication header. Use base63 encoding\n    return \"Basic \" + window.btoa(userName + \":\" + password);\n  } //  Basic Authentication *********************************\n\n\n  executreJwtAuthenticationService(userName, password) {\n    return axios.get(\"\".concat(AUTH_API_URL), {\n      headers: {\n        authorization: this.createBasicAuthToken(userName, password)\n      }\n    });\n  } //  Add user name to session storage\n\n\n  registerLogin(userName, password) {\n    sessionStorage.setItem(\"User\", userName);\n    this.axiosInterceptor(this.createBasicAuthToken(userName, password));\n  } //  Remove user name from session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"User\");\n  }\n\n  getLoggedUser() {\n    //  Get the currently logged in user\n    let userName = sessionStorage.getItem(\"User\");\n    if (userName === null) return '';\n    return userName;\n  } //  Check if a user is logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"User\");\n    if (user === null) return false;\n    return true;\n  } //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\n  //  The username and password are sent to it from the login \n\n\n  axiosInterceptor(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/service/AuthenticationService.js"],"names":["axios","BASIC_AUTH_API_URL","AuthenticationService","executeBasicAuthenticationService","userName","password","get","AUTH_API_URL","headers","authorization","createBasicAuthToken","window","btoa","executreJwtAuthenticationService","registerLogin","sessionStorage","setItem","axiosInterceptor","logout","removeItem","getLoggedUser","getItem","isLoggedIn","user","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAG,iCAA3B;;AAEA,MAAMC,qBAAN,CAA4B;AACxB;AACAC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAOL,KAAK,CAACM,GAAN,WAAaC,YAAb,GACP;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BN,QAA1B,EAAoCC,QAApC;AAAhB;AAAV,KADO,CAAP;AAEH;;AAEDK,EAAAA,oBAAoB,CAACN,QAAD,EAAWC,QAAX,EAAoB;AACpC;AACA,WAAO,WAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GAVuB,CAWxB;;;AAEAQ,EAAAA,gCAAgC,CAACT,QAAD,EAAWC,QAAX,EAAoB;AAChD,WAAOL,KAAK,CAACM,GAAN,WAAaC,YAAb,GACP;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BN,QAA1B,EAAoCC,QAApC;AAAhB;AAAV,KADO,CAAP;AAEH,GAhBuB,CAiBxB;;;AACAS,EAAAA,aAAa,CAACV,QAAD,EAAWC,QAAX,EAAoB;AAC7BU,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BZ,QAA/B;AACA,SAAKa,gBAAL,CAAsB,KAAKP,oBAAL,CAA0BN,QAA1B,EAAoCC,QAApC,CAAtB;AACH,GArBuB,CAsBxB;;;AACAa,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0B,MAA1B;AACH;;AACDC,EAAAA,aAAa,GAAG;AAChB;AACI,QAAIhB,QAAQ,GAAGW,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAf;AACA,QAAGjB,QAAQ,KAAG,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,QAAP;AACH,GA/BuB,CAgCxB;;;AACAkB,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAGR,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAX;AAEA,QAAGE,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH,GAtCuB,CAwCxB;AACA;;;AACAN,EAAAA,gBAAgB,CAACO,eAAD,EAAiB;AAC7BxB,IAAAA,KAAK,CAACyB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKN,UAAL,EAAH,EAAqB;AACjBM,QAAAA,MAAM,CAACpB,OAAP,CAAeC,aAAf,GAA+Be,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AASH;;AApDuB;;AAuD5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst BASIC_AUTH_API_URL = 'http://localhost:8080/basicauth'\r\n\r\nclass AuthenticationService {\r\n    //  Basic Authentication *********************************\r\n    executeBasicAuthenticationService(userName, password){\r\n        return axios.get(`${AUTH_API_URL}`,\r\n        {headers: {authorization: this.createBasicAuthToken(userName, password)}});\r\n    }\r\n\r\n    createBasicAuthToken(userName, password){\r\n        //  Create standard authentication header. Use base63 encoding\r\n        return \"Basic \" + window.btoa(userName + \":\" + password)\r\n    }\r\n    //  Basic Authentication *********************************\r\n\r\n    executreJwtAuthenticationService(userName, password){\r\n        return axios.get(`${AUTH_API_URL}`,\r\n        {headers: {authorization: this.createBasicAuthToken(userName, password)}});\r\n    }\r\n    //  Add user name to session storage\r\n    registerLogin(userName, password){\r\n        sessionStorage.setItem(\"User\", userName);\r\n        this.axiosInterceptor(this.createBasicAuthToken(userName, password));\r\n    }\r\n    //  Remove user name from session storage\r\n    logout(){\r\n        sessionStorage.removeItem(\"User\");\r\n    }\r\n    getLoggedUser() {\r\n    //  Get the currently logged in user\r\n        let userName = sessionStorage.getItem(\"User\")\r\n        if(userName===null) return ''\r\n        return userName\r\n    }\r\n    //  Check if a user is logged in\r\n    isLoggedIn(){\r\n        let user = sessionStorage.getItem(\"User\");\r\n\r\n        if(user === null) return false\r\n        return true\r\n    }\r\n\r\n    //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\r\n    //  The username and password are sent to it from the login \r\n    axiosInterceptor(basicAuthHeader){\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}