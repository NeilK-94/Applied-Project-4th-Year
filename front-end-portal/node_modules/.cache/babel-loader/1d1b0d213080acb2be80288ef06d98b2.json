{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\components\\\\HomeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-awesome-modal';\nimport JobDataService from '../service/JobDataService';\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass HomeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobs: [],\n      searchQueryEmployer: 'Cisco',\n      searchQueryLocation: 'Galway',\n      searchQueryJobTitle: 'Front End Developer',\n      hasSearchFailed: false,\n      hasDeleteSucceeded: false,\n      visible: false,\n      selected: 0,\n      deleteSuccessful: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.searchEmployerClicked = this.searchEmployerClicked.bind(this);\n    this.searchLocationClicked = this.searchLocationClicked.bind(this);\n    this.searchJobTitleClicked = this.searchJobTitleClicked.bind(this);\n    this.updateJobClicked = this.updateJobClicked.bind(this);\n    this.deleteJobClicked = this.deleteJobClicked.bind(this);\n    this.refreshJobs = this.refreshJobs.bind(this);\n  }\n\n  openModal() {\n    this.setState({\n      visible: true,\n      hasDeleteSucceeded: false,\n      deleteSuccessful: false\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      visible: false,\n      hasDeleteSucceeded: false\n    });\n  }\n\n  refreshJobs() {\n    JobDataService.retrieveJobByEmployer(this.state.searchQueryEmployer) //  Make call to the REST API\n    .then( //  Decide what to do once call is made succesfully\n    response => {\n      //console.log(response);\n      this.setState({\n        jobs: response.data\n      }); //  When response comes back with data, update the state.\n\n      if (this.state.deleteSuccessful) {\n        this.setState({\n          hasDeleteSucceeded: true\n        });\n      }\n    }); //  .catch handles unsuccessful. Add later\n  }\n\n  deleteJobClicked(id) {\n    let username = AuthenticationService.getLoggedUser();\n    JobDataService.deleteJob(username, id).then(response => {\n      this.setState({\n        deleteSuccessful: true\n      });\n      this.setState({\n        hasDeleteSucceeded: true\n      }); // this.state.deleteSuccessful = true;\n      // this.state.hasDeleteSucceeded = true;\n\n      this.refreshJobs();\n      this.closeModal();\n    });\n  }\n\n  updateJobClicked(id) {\n    this.props.history.push(\"/jobs/\".concat(id));\n  } //  Too much repeat code with these 3 methods, can be more efficient. Like handle change method.\n\n\n  searchEmployerClicked() {\n    this.setState({\n      hasDeleteSucceeded: false\n    }); //this.state.hasDeleteSucceeded = false\n\n    JobDataService.retrieveJobByEmployer(this.state.searchQueryEmployer).then( //  Decide what to do once call is made succesfully\n    response => {\n      //console.log(response.data);\n      this.setState({\n        jobs: response.data\n      });\n\n      if (response.data.length < 1) {\n        this.setState({\n          hasSearchFailed: true\n        });\n      } else if (response.data.length > 0) {\n        this.setState({\n          hasSearchFailed: false\n        });\n      }\n    });\n  }\n\n  searchLocationClicked() {\n    this.setState({\n      hasDeleteSucceeded: false\n    }); //this.state.hasDeleteSucceeded = false\n\n    JobDataService.retrieveJobByCounty(this.state.searchQueryLocation).then( //  Decide what to do once call is made succesfully\n    response => {\n      //console.log(response.data);\n      this.setState({\n        jobs: response.data\n      });\n\n      if (response.data.length < 1) {\n        this.setState({\n          hasSearchFailed: true\n        });\n      } else if (response.data.length > 0) {\n        this.setState({\n          hasSearchFailed: false\n        });\n      }\n    });\n  }\n\n  searchJobTitleClicked() {\n    this.setState({\n      hasDeleteSucceeded: false\n    }); //this.state.hasDeleteSucceeded = false\n\n    JobDataService.retrieveJobByJobTitle(this.state.searchQueryJobTitle).then( //  Decide what to do once call is made succesfully\n    response => {\n      //console.log(response.data);\n      this.setState({\n        jobs: response.data\n      });\n\n      if (response.data.length < 1) {\n        this.setState({\n          hasSearchFailed: true\n        });\n      } else if (response.data.length > 0) {\n        this.setState({\n          hasSearchFailed: false\n        });\n      }\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  toggleEmployerClinked() {\n    console.log(\"Employer clicked\");\n  }\n\n  toggleLocationClinked() {\n    console.log(\"Location clicked\");\n  }\n\n  render() {\n    let selected = this.state.selected;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"jumbotron jumbotron-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"display-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"The Developer's Job Site\"), React.createElement(\"hr\", {\n      className: \"my-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Welcome \", this.props.match.params.username, \". You can view the latest jobs \", React.createElement(Link, {\n      to: \"/jobs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"here.\")))), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, this.state.hasSearchFailed && React.createElement(\"div\", {\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Failed Search\"), this.state.hasDeleteSucceeded && React.createElement(\"div\", {\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Succesfully deleted the job posting\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Search a job\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"You can search for jobs from a certain employer or by location.\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-secondary\",\n      onClick: () => this.setState({\n        selected: 0\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \" Employer \"), React.createElement(\"button\", {\n      className: \"btn btn-secondary\",\n      onClick: () => this.setState({\n        selected: 1\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \" Location \"), React.createElement(\"button\", {\n      className: \"btn btn-secondary\",\n      onClick: () => this.setState({\n        selected: 2\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \" Job Title \")), selected === 0 && React.createElement(\"div\", {\n      id: \"employer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"searchQueryEmployer\",\n      value: this.state.searchQueryEmployer,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.searchClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Search\")), selected === 1 && React.createElement(\"div\", {\n      id: \"location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"searchQueryLocation\",\n      value: this.state.searchQueryLocation,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.searchCountyClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Search\")), selected === 2 && React.createElement(\"div\", {\n      id: \"jobTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"searchQueryJobTitle\",\n      value: this.state.searchQueryJobTitle,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.searchCountyClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Search\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Employer\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Job Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Location\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Description\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.jobs.map( //  map allows you to loop around items\n    job => //  a key is used to identify a row\n    React.createElement(\"tr\", {\n      key: job.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, job.employer), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, job.jobTitle), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, job.county), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, job.description), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.openModal(job.jobTitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"View\")), React.createElement(Modal, {\n      visible: this.state.visible,\n      width: \"500\",\n      height: \"400\",\n      effect: \"fadeInRight\",\n      onClickAway: () => this.closeModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, job.jobTitle)), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, job.employer), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, job.county), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, job.description), React.createElement(\"button\", {\n      className: \"btn btn-info\",\n      onClick: () => this.closeModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Close\"), React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.deleteJobClicked(job.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.updateJobClicked(job.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Update\")))))))));\n  }\n\n}\n\nexport default HomeComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/components/HomeComponent.jsx"],"names":["React","Component","Link","Modal","JobDataService","AuthenticationService","HomeComponent","constructor","props","state","jobs","searchQueryEmployer","searchQueryLocation","searchQueryJobTitle","hasSearchFailed","hasDeleteSucceeded","visible","selected","deleteSuccessful","handleChange","bind","searchEmployerClicked","searchLocationClicked","searchJobTitleClicked","updateJobClicked","deleteJobClicked","refreshJobs","openModal","setState","closeModal","retrieveJobByEmployer","then","response","data","id","username","getLoggedUser","deleteJob","history","push","length","retrieveJobByCounty","retrieveJobByJobTitle","event","target","name","value","toggleEmployerClinked","console","log","toggleLocationClinked","render","match","params","searchClicked","searchCountyClicked","map","job","employer","jobTitle","county","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Modal from 'react-awesome-modal';\r\n\r\nimport JobDataService from '../service/JobDataService';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass HomeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = { \r\n            jobs: [],\r\n            searchQueryEmployer: 'Cisco',\r\n            searchQueryLocation: 'Galway',\r\n            searchQueryJobTitle: 'Front End Developer',\r\n            hasSearchFailed: false,\r\n            hasDeleteSucceeded: false,\r\n            visible : false,\r\n            selected: 0,\r\n            deleteSuccessful: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.searchEmployerClicked = this.searchEmployerClicked.bind(this);\r\n        this.searchLocationClicked = this.searchLocationClicked.bind(this);\r\n        this.searchJobTitleClicked = this.searchJobTitleClicked.bind(this);\r\n        this.updateJobClicked = this.updateJobClicked.bind(this);\r\n        this.deleteJobClicked = this.deleteJobClicked.bind(this)\r\n        this.refreshJobs = this.refreshJobs.bind(this)\r\n    }    \r\n\r\n    openModal() {\r\n        this.setState({\r\n            visible : true,\r\n            hasDeleteSucceeded: false,\r\n            deleteSuccessful: false\r\n        });\r\n    }\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false,\r\n            hasDeleteSucceeded: false\r\n        });\r\n    }\r\n    refreshJobs() {\r\n        JobDataService.retrieveJobByEmployer(this.state.searchQueryEmployer)    //  Make call to the REST API\r\n            .then(  //  Decide what to do once call is made succesfully\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ jobs: response.data })  //  When response comes back with data, update the state.\r\n                    if(this.state.deleteSuccessful){\r\n                        this.setState({ hasDeleteSucceeded: true })\r\n                    }\r\n                },                \r\n            )   //  .catch handles unsuccessful. Add later\r\n    }\r\n\r\n    deleteJobClicked(id) {\r\n        let username = AuthenticationService.getLoggedUser()\r\n\r\n        JobDataService.deleteJob(username, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ deleteSuccessful: true })\r\n                    this.setState({ hasDeleteSucceeded: true })\r\n\r\n                    // this.state.deleteSuccessful = true;\r\n                    // this.state.hasDeleteSucceeded = true;\r\n                    this.refreshJobs()\r\n                    this.closeModal()\r\n                }\r\n            )\r\n    }\r\n    updateJobClicked(id){\r\n        this.props.history.push(`/jobs/${id}`)\r\n    }\r\n\r\n    //  Too much repeat code with these 3 methods, can be more efficient. Like handle change method.\r\n    searchEmployerClicked(){\r\n        this.setState({ hasDeleteSucceeded: false })\r\n        //this.state.hasDeleteSucceeded = false\r\n        JobDataService.retrieveJobByEmployer(this.state.searchQueryEmployer)\r\n        .then(  //  Decide what to do once call is made succesfully\r\n            response => {\r\n                //console.log(response.data);\r\n                this.setState({ jobs: response.data })\r\n                if(response.data.length < 1){\r\n                    this.setState({ hasSearchFailed: true })\r\n                }\r\n                else if(response.data.length > 0){\r\n                    this.setState({ hasSearchFailed: false })\r\n                }\r\n            })\r\n    }\r\n    searchLocationClicked(){\r\n        this.setState({ hasDeleteSucceeded: false })\r\n        //this.state.hasDeleteSucceeded = false\r\n        JobDataService.retrieveJobByCounty(this.state.searchQueryLocation)\r\n        .then(  //  Decide what to do once call is made succesfully\r\n            response => {\r\n                //console.log(response.data);\r\n                this.setState({ jobs: response.data })\r\n                if(response.data.length < 1){\r\n                    this.setState({ hasSearchFailed: true })\r\n                }\r\n                else if(response.data.length > 0){\r\n                    this.setState({ hasSearchFailed: false })\r\n                }\r\n            })\r\n    }\r\n    searchJobTitleClicked(){\r\n        this.setState({ hasDeleteSucceeded: false })\r\n        //this.state.hasDeleteSucceeded = false\r\n        JobDataService.retrieveJobByJobTitle(this.state.searchQueryJobTitle)\r\n        .then(  //  Decide what to do once call is made succesfully\r\n            response => {\r\n                //console.log(response.data);\r\n                this.setState({ jobs: response.data })\r\n                if(response.data.length < 1){\r\n                    this.setState({ hasSearchFailed: true })\r\n                }\r\n                else if(response.data.length > 0){\r\n                    this.setState({ hasSearchFailed: false })\r\n                }\r\n            })\r\n    }        \r\n    handleChange(event){\r\n        this.setState(\r\n            {\r\n                [event.target.name]: event.target.value\r\n            }\r\n        );\r\n    }\r\n    toggleEmployerClinked(){\r\n        console.log(\"Employer clicked\")\r\n    }\r\n    toggleLocationClinked(){\r\n        console.log(\"Location clicked\")\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        let selected = this.state.selected\r\n        return (\r\n           <>\r\n                <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-5\">The Developer's Job Site</h1>\r\n                    <hr className=\"my-4\"></hr>\r\n                    <p className=\"lead\">Welcome {this.props.match.params.username}. You can view the latest jobs <Link to=\"/jobs\">here.</Link></p>\r\n                </div>\r\n                </div>\r\n                {/*  Component ********** */}\r\n                <div className=\"container\">\r\n                    {this.state.hasSearchFailed && <div className=\"alert alert-warning\">Failed Search</div>}\r\n                    {this.state.hasDeleteSucceeded && <div className=\"alert alert-warning\">Succesfully deleted the job posting</div>}\r\n                    <h4>Search a job</h4>\r\n                    <p>You can search for jobs from a certain employer or by location.</p>\r\n                    <div className=\"container\">\r\n                    <span id=\"toggle\">\r\n                        <button className=\"btn btn-secondary\" onClick={() => this.setState({ selected: 0 })}> Employer </button>\r\n                        <button className=\"btn btn-secondary\" onClick={() => this.setState({ selected: 1 })}> Location </button>\r\n                        <button className=\"btn btn-secondary\" onClick={() => this.setState({ selected: 2 })}> Job Title </button>     \r\n                    </span>\r\n                        {(selected === 0) && <div id=\"employer\">\r\n                        <input type=\"text\" name=\"searchQueryEmployer\" value={this.state.searchQueryEmployer} onChange={this.handleChange}></input>\r\n                        <button className=\"btn btn-success\" onClick={this.searchClicked}>Search</button></div>}\r\n                        {(selected === 1) && <div id=\"location\">\r\n                        <input type=\"text\" name=\"searchQueryLocation\" value={this.state.searchQueryLocation} onChange={this.handleChange}></input>\r\n                        <button className=\"btn btn-success\" onClick={this.searchCountyClicked}>Search</button></div>}\r\n                        {(selected === 2) && <div id=\"jobTitle\">\r\n                        <input type=\"text\" name=\"searchQueryJobTitle\" value={this.state.searchQueryJobTitle} onChange={this.handleChange}></input>\r\n                        <button className=\"btn btn-success\" onClick={this.searchCountyClicked}>Search</button></div>}\r\n                    </div>\r\n                    </div>\r\n                    {/*  Component ********** */}\r\n                    <br></br>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Employer</th>\r\n                                <th>Job Title</th>\r\n                                <th>Location</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {   \r\n                                this.state.jobs.map(    //  map allows you to loop around items\r\n                                    job =>  //  a key is used to identify a row\r\n                                        <tr key={job.id}>\r\n                                            <td>{job.employer}</td>\r\n                                            <td>{job.jobTitle}</td>\r\n                                            <td>{job.county}</td>\r\n                                            <td>{job.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.openModal(job.jobTitle)}>View</button></td>\r\n                                                <Modal visible={this.state.visible} width=\"500\" height=\"400\" effect=\"fadeInRight\" onClickAway={() => this.closeModal()}>\r\n                                                    <tr><div className=\"popup\">\r\n                                                        <td><h3>{job.jobTitle}</h3></td>\r\n                                                        <h4>{job.employer}</h4>\r\n                                                        <h4>{job.county}</h4>\r\n                                                        <p>{job.description}</p>\r\n                                                        <button className=\"btn btn-info\" onClick={() => this.closeModal()}>Close</button>\r\n                                                        <button className=\"btn btn-warning\" onClick={() => this.deleteJobClicked(job.id)}>Delete</button>\r\n                                                        <button className=\"btn btn-success\" onClick={() => this.updateJobClicked(job.id)}>Update</button>\r\n                                                    </div></tr>\r\n                                                </Modal>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    {/*  Component ********** */}\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomeComponent"]},"metadata":{},"sourceType":"module"}