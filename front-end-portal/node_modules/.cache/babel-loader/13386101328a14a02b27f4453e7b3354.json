{"ast":null,"code":"class AuthenticationService {\n  //  Add user name to session storage\n  registerLogin(userName, password) {\n    sessionStorage.setItem(\"User\", userName);\n  } //  Remove user name from session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"User\");\n  }\n\n  getLoggedUser() {\n    //  Get the currently logged in user\n    let userName = sessionStorage.getItem(\"User\");\n    if (userName === null) return '';\n    return userName;\n  } //  Check if a user is logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"User\");\n    if (user === null) return false;\n    return true;\n  } //  This function intercepts the axios request being sent to the backend and adds an authorization header to it\n\n\n  axiosInterceptor() {}\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/service/AuthenticationService.js"],"names":["AuthenticationService","registerLogin","userName","password","sessionStorage","setItem","logout","removeItem","getLoggedUser","getItem","isLoggedIn","user","axiosInterceptor"],"mappings":"AAAA,MAAMA,qBAAN,CAA4B;AACxB;AACAC,EAAAA,aAAa,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC7BC,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BH,QAA/B;AACH,GAJuB,CAKxB;;;AACAI,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0B,MAA1B;AACH;;AACDC,EAAAA,aAAa,GAAG;AAChB;AACI,QAAIN,QAAQ,GAAGE,cAAc,CAACK,OAAf,CAAuB,MAAvB,CAAf;AACA,QAAGP,QAAQ,KAAG,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,QAAP;AACH,GAduB,CAexB;;;AACAQ,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAGP,cAAc,CAACK,OAAf,CAAuB,MAAvB,CAAX;AAEA,QAAGE,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH,GArBuB,CAuBxB;;;AACAC,EAAAA,gBAAgB,GAAE,CAEjB;;AA1BuB;;AA6B5B,eAAe,IAAIZ,qBAAJ,EAAf","sourcesContent":["class AuthenticationService {\r\n    //  Add user name to session storage\r\n    registerLogin(userName, password){\r\n        sessionStorage.setItem(\"User\", userName);\r\n    }\r\n    //  Remove user name from session storage\r\n    logout(){\r\n        sessionStorage.removeItem(\"User\");\r\n    }\r\n    getLoggedUser() {\r\n    //  Get the currently logged in user\r\n        let userName = sessionStorage.getItem(\"User\")\r\n        if(userName===null) return ''\r\n        return userName\r\n    }\r\n    //  Check if a user is logged in\r\n    isLoggedIn(){\r\n        let user = sessionStorage.getItem(\"User\");\r\n\r\n        if(user === null) return false\r\n        return true\r\n    }\r\n\r\n    //  This function intercepts the axios request being sent to the backend and adds an authorization header to it\r\n    axiosInterceptor(){\r\n\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}