{"ast":null,"code":"import axios from 'axios';\nconst AUTH_API_URL = 'http://localhost:8080/basicauth';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(userName, password) {\n    return axios.get(\"\".concat(AUTH_API_URL), {\n      headers: {\n        authorization: createBasicAuthToken()\n      }\n    });\n  }\n\n  createBasicAuthToken(userName, password) {\n    return basicAuthHeader = \"Basic \" + window.btoa(userName + \":\" + password);\n  } //  Add user name to session storage\n\n\n  registerLogin(userName, password) {\n    //  Create standard authentication header. Use base63 encoding\n    let basicAuthHeader = \"Basic \" + window.btoa(userName + \":\" + password);\n    sessionStorage.setItem(\"User\", userName);\n    this.axiosInterceptor(basicAuthHeader);\n  } //  Remove user name from session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"User\");\n  }\n\n  getLoggedUser() {\n    //  Get the currently logged in user\n    let userName = sessionStorage.getItem(\"User\");\n    if (userName === null) return '';\n    return userName;\n  } //  Check if a user is logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"User\");\n    if (user === null) return false;\n    return true;\n  } //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\n  //  The username and password are sent to it from the login \n\n\n  axiosInterceptor(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/service/AuthenticationService.js"],"names":["axios","AUTH_API_URL","AuthenticationService","executeBasicAuthenticationService","userName","password","get","headers","authorization","createBasicAuthToken","basicAuthHeader","window","btoa","registerLogin","sessionStorage","setItem","axiosInterceptor","logout","removeItem","getLoggedUser","getItem","isLoggedIn","user","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG,iCAArB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAOL,KAAK,CAACM,GAAN,WAAaL,YAAb,GAA6B;AAACM,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEC,oBAAoB;AAApC;AAAV,KAA7B,CAAP;AACH;;AAEDA,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC,WAAOK,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAApC;AACH,GAPuB,CASxB;;;AACAQ,EAAAA,aAAa,CAACT,QAAD,EAAWC,QAAX,EAAoB;AAC7B;AACA,QAAIK,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAS,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BX,QAA/B;AACA,SAAKY,gBAAL,CAAsBN,eAAtB;AACH,GAhBuB,CAiBxB;;;AACAO,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0B,MAA1B;AACH;;AACDC,EAAAA,aAAa,GAAG;AAChB;AACI,QAAIf,QAAQ,GAAGU,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAf;AACA,QAAGhB,QAAQ,KAAG,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,QAAP;AACH,GA1BuB,CA2BxB;;;AACAiB,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAGR,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAX;AAEA,QAAGE,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH,GAjCuB,CAmCxB;AACA;;;AACAN,EAAAA,gBAAgB,CAACN,eAAD,EAAiB;AAC7BV,IAAAA,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKL,UAAL,EAAH,EAAqB;AACjBK,QAAAA,MAAM,CAACnB,OAAP,CAAeC,aAAf,GAA+BE,eAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AASH;;AA/CuB;;AAkD5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst AUTH_API_URL = 'http://localhost:8080/basicauth'\r\n\r\nclass AuthenticationService {\r\n    executeBasicAuthenticationService(userName, password){\r\n        return axios.get(`${AUTH_API_URL}`, {headers: {authorization: createBasicAuthToken()}});\r\n    }\r\n\r\n    createBasicAuthToken(userName, password){\r\n        return basicAuthHeader = \"Basic \" + window.btoa(userName + \":\" + password)\r\n    }\r\n\r\n    //  Add user name to session storage\r\n    registerLogin(userName, password){\r\n        //  Create standard authentication header. Use base63 encoding\r\n        let basicAuthHeader = \"Basic \" + window.btoa(userName + \":\" + password)\r\n\r\n        sessionStorage.setItem(\"User\", userName);\r\n        this.axiosInterceptor(basicAuthHeader);\r\n    }\r\n    //  Remove user name from session storage\r\n    logout(){\r\n        sessionStorage.removeItem(\"User\");\r\n    }\r\n    getLoggedUser() {\r\n    //  Get the currently logged in user\r\n        let userName = sessionStorage.getItem(\"User\")\r\n        if(userName===null) return ''\r\n        return userName\r\n    }\r\n    //  Check if a user is logged in\r\n    isLoggedIn(){\r\n        let user = sessionStorage.getItem(\"User\");\r\n\r\n        if(user === null) return false\r\n        return true\r\n    }\r\n\r\n    //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\r\n    //  The username and password are sent to it from the login \r\n    axiosInterceptor(basicAuthHeader){\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}