{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\component\\\\NewJobComponent.jsx\";\nimport React, { Component } from 'react';\nimport JobDataService from '../service/JobDataService';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass NewJobComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      employer: this.props.match.employer,\n      description: ''\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.backButton = this.backButton.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.id == -1) {\n      console.log(\"Not mounting, (Create job)\");\n      return;\n    }\n\n    console.log(this.state.id);\n    console.log(\"mounting, (Update job)\");\n    let username = AuthenticationService.getLoggedUser();\n    JobDataService.retrieveJob(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      employer: response.data.employer,\n      jobTitle: response.data.jobTitle\n    }));\n  } //    Error handling for form\n\n\n  validate(values) {\n    let errors = {}; //  add validation for every field!!!!!!\n\n    if (!values.description) {\n      errors.description = 'Enter a description';\n    } else if (values.description.length < 5) {\n      errors.description = 'Description must be at least 5 characters long';\n    }\n\n    return errors;\n  } //    When save is clicked\n\n\n  onSubmit(values) {\n    // let employer = this.state.employer\n    // let id = this.state.id\n    // let jobTitle = this.state.jobTitle\n    let job = {\n      id: this.state.id,\n      employer: values.employer,\n      jobTitle: values.jobTitle,\n      description: values.description\n    }; //  For create, if getting promise error check params in data service. \n\n    if (this.state.id === -1) {\n      JobDataService.createJob(job.jobTitle, job.employer, this.state.id, job).then(() => this.props.history.push('/jobs'));\n    } else {\n      JobDataService.updateJob(job.jobTitle, job.employer, this.state.id, job).then(() => this.props.history.push('/jobs'));\n    }\n  }\n\n  backButton() {\n    this.props.history.goBack();\n  }\n\n  render() {\n    let _this$state = this.state,\n        description = _this$state.description,\n        employer = _this$state.employer,\n        jobTitle = _this$state.jobTitle;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Update \", this.state.employer, \"'s \", this.state.jobTitle, \" Job\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        description: description,\n        employer: employer,\n        jobTitle: jobTitle\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Employer\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"employer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Job Title\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"jobTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"btn-toolbar\",\n      role: \"toolbar\",\n      \"aria-label\": \"Toolbar with button groups\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn-group mr-2\",\n      role: \"group\",\n      \"aria-label\": \"First group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Save\")), React.createElement(\"div\", {\n      className: \"btn-group mr-2\",\n      role: \"group\",\n      \"aria-label\": \"Second group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-sm\",\n      onClick: this.backButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Back\")))))));\n  }\n\n}\n\nexport default NewJobComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/NewJobComponent.jsx"],"names":["React","Component","JobDataService","Formik","Form","Field","ErrorMessage","AuthenticationService","NewJobComponent","constructor","props","state","id","match","params","employer","description","onSubmit","bind","validate","backButton","componentDidMount","console","log","username","getLoggedUser","retrieveJob","then","response","setState","data","jobTitle","values","errors","length","job","createJob","history","push","updateJob","goBack","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport JobDataService from '../service/JobDataService';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass NewJobComponent extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n\r\n      this.state = {\r\n        id: this.props.match.params.id,\r\n        employer: this.props.match.employer,\r\n        description: ''\r\n      }\r\n      this.onSubmit = this.onSubmit.bind(this)\r\n      this.validate = this.validate.bind(this)\r\n      this.backButton = this.backButton.bind(this)\r\n\r\n  }\r\n  componentDidMount() {\r\n    if (this.state.id == -1) {\r\n        console.log(\"Not mounting, (Create job)\")\r\n        return;\r\n    }\r\n    console.log(this.state.id)\r\n    console.log(\"mounting, (Update job)\")\r\n    let username = AuthenticationService.getLoggedUser()\r\n\r\n    JobDataService.retrieveJob(username, this.state.id)\r\n    .then(response => this.setState({\r\n        description: response.data.description,\r\n        employer: response.data.employer,\r\n        jobTitle: response.data.jobTitle\r\n        }))\r\n  }\r\n\r\n  //    Error handling for form\r\n  validate(values) {\r\n    let errors = {} //  add validation for every field!!!!!!\r\n    if (!values.description) {\r\n        errors.description = 'Enter a description'\r\n    } else if (values.description.length < 5) {\r\n        errors.description = 'Description must be at least 5 characters long'\r\n    }\r\n    return errors\r\n  }\r\n\r\n  //    When save is clicked\r\n  onSubmit(values) {\r\n    // let employer = this.state.employer\r\n    // let id = this.state.id\r\n    // let jobTitle = this.state.jobTitle\r\n    let job = {\r\n        id: this.state.id,\r\n        employer: values.employer,\r\n        jobTitle: values.jobTitle,\r\n        description: values.description\r\n    }\r\n    //  For create, if getting promise error check params in data service. \r\n\r\n    if (this.state.id === -1) {\r\n        JobDataService.createJob(job.jobTitle, job.employer, this.state.id, job)\r\n            .then(() => this.props.history.push('/jobs'))\r\n    } else {\r\n        JobDataService.updateJob(job.jobTitle, job.employer, this.state.id, job)\r\n            .then(() => this.props.history.push('/jobs'))\r\n    }\r\n  }\r\n  backButton(){\r\n    this.props.history.goBack();\r\n  }\r\n\r\n  render() {\r\n    let { description, employer, jobTitle } = this.state\r\n    return (\r\n        <div>            \r\n            <h3>Update {this.state.employer}'s {this.state.jobTitle} Job</h3>\r\n            <div className=\"container\">\r\n                <Formik\r\n                    initialValues={{description: description, employer: employer, jobTitle: jobTitle}}\r\n                    \r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}    \r\n                >\r\n                {\r\n                    (props) => (\r\n                        <Form>\r\n                            <ErrorMessage name=\"description\" component=\"div\"\r\n                                className=\"alert alert-warning\" />\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Employer</label>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"employer\" />\r\n                            </fieldset>\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Job Title</label>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"jobTitle\" />\r\n                            </fieldset>\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                            </fieldset>\r\n                            <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                                <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </div>\r\n                                <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\r\n                                    <button className=\"btn btn-sm\" onClick={this.backButton}>Back</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default NewJobComponent"]},"metadata":{},"sourceType":"module"}