{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\component\\\\LoginComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from '../service/AuthenticationService';\nimport { Formik, Field, ErrorMessage } from \"formik\";\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: 'Neil',\n      password: '',\n      hasLoginFailed: false,\n      SuccessfulLogin: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n  }\n\n  render() {\n    return React.createElement(Formik, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  } //  This is a generic change handler rather than having to have a method for each element!\n\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  loginClicked() {\n    // if(this.state.username === \"Neil\" && this.state.password === \"password\"){\n    //     //  Send username and password to authentication service\n    //     AuthenticationService.registerLogin(this.state.username, this.state.password)\n    //     this.setState(\n    //         {\n    //             SuccessfulLogin: true,\n    //             hasLoginFailed: false,\n    //         }\n    //     )\n    //     this.props.history.push(`/home/${this.state.username}`)\n    // } else{\n    //     this.setState(\n    //         {\n    //             hasLoginFailed: true,\n    //             SuccessfulLogin: false\n    //         }\n    //     )\n    // }\n    // AuthenticationService.executeBasicAuthenticationService(this.state.username, this.state.password)\n    // .then(\n    //     () => {\n    //         AuthenticationService.registerLogin(this.state.username, this.state.password)\n    //         this.setState({ SuccessfulLogin: true, hasLoginFailed: false})  //  dont need!!!!!!!!!!!!!!!!!!\n    //         this.props.history.push(`/home/${this.state.username}`)\n    //     }\n    // ).catch( ()=> {\n    //     this.setState({hasLoginFailed: true})\n    //     this.setState({SuccessfulLogin: false})\n    // })\n    AuthenticationService.executeJwtAuthenticationService(this.state.username, this.state.password).then(response => {\n      AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n      this.props.history.push(\"/home/\".concat(this.state.username));\n    }).catch(() => {\n      this.setState({\n        showSuccessMessage: false\n      });\n      this.setState({\n        hasLoginFailed: true\n      });\n    });\n  }\n\n}\n\nexport default LoginComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/LoginComponent.jsx"],"names":["React","Component","AuthenticationService","Formik","Field","ErrorMessage","LoginComponent","constructor","props","state","username","password","hasLoginFailed","SuccessfulLogin","handleChange","bind","loginClicked","render","event","setState","target","name","value","executeJwtAuthenticationService","then","response","registerSuccessfulLoginForJwt","data","token","history","push","catch","showSuccessMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,YAAxB,QAA4C,QAA5C;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAuC;AACnCM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,MADD;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,cAAc,EAAE,KAHP;AAITC,MAAAA,eAAe,EAAE;AAJR,KAAb;AAMA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AAEH;;AACDE,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAKH,GAnBkC,CAoBnC;;;AACAH,EAAAA,YAAY,CAACI,KAAD,EAAO;AACf,SAAKC,QAAL,CACI;AACI,OAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADtC,KADJ;AAKH;;AAEDN,EAAAA,YAAY,GAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAd,IAAAA,qBAAqB,CAChBqB,+BADL,CACqC,KAAKd,KAAL,CAAWC,QADhD,EAC0D,KAAKD,KAAL,CAAWE,QADrE,EAEKa,IAFL,CAEWC,QAAD,IAAc;AAChBvB,MAAAA,qBAAqB,CAACwB,6BAAtB,CAAoD,KAAKjB,KAAL,CAAWC,QAA/D,EAAyEe,QAAQ,CAACE,IAAT,CAAcC,KAAvF;AACA,WAAKpB,KAAL,CAAWqB,OAAX,CAAmBC,IAAnB,iBAAiC,KAAKrB,KAAL,CAAWC,QAA5C;AACH,KALL,EAKOqB,KALP,CAKa,MAAM;AACX,WAAKZ,QAAL,CAAc;AAAEa,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACA,WAAKb,QAAL,CAAc;AAAEP,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACH,KARL;AASH;;AArEkC;;AAwEvC,eAAeN,cAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport { Formik, Field, ErrorMessage } from \"formik\"\r\n\r\nclass LoginComponent extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            username: 'Neil',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            SuccessfulLogin: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.loginClicked = this.loginClicked.bind(this);\r\n\r\n    }\r\n    render(){\r\n        return (\r\n            <Formik>\r\n\r\n            </Formik>\r\n        )\r\n    }\r\n    //  This is a generic change handler rather than having to have a method for each element!\r\n    handleChange(event){\r\n        this.setState(\r\n            {\r\n                [event.target.name]: event.target.value\r\n            }\r\n        );\r\n    }\r\n\r\n    loginClicked(){\r\n        // if(this.state.username === \"Neil\" && this.state.password === \"password\"){\r\n        //     //  Send username and password to authentication service\r\n        //     AuthenticationService.registerLogin(this.state.username, this.state.password)\r\n        //     this.setState(\r\n        //         {\r\n        //             SuccessfulLogin: true,\r\n        //             hasLoginFailed: false,\r\n        //         }\r\n        //     )\r\n        //     this.props.history.push(`/home/${this.state.username}`)\r\n        // } else{\r\n        //     this.setState(\r\n        //         {\r\n        //             hasLoginFailed: true,\r\n        //             SuccessfulLogin: false\r\n        //         }\r\n        //     )\r\n        // }\r\n        // AuthenticationService.executeBasicAuthenticationService(this.state.username, this.state.password)\r\n        // .then(\r\n        //     () => {\r\n        //         AuthenticationService.registerLogin(this.state.username, this.state.password)\r\n        //         this.setState({ SuccessfulLogin: true, hasLoginFailed: false})  //  dont need!!!!!!!!!!!!!!!!!!\r\n        //         this.props.history.push(`/home/${this.state.username}`)\r\n        //     }\r\n        // ).catch( ()=> {\r\n        //     this.setState({hasLoginFailed: true})\r\n        //     this.setState({SuccessfulLogin: false})\r\n        // })\r\n\r\n        AuthenticationService\r\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\r\n            .then((response) => {\r\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\r\n                this.props.history.push(`/home/${this.state.username}`)\r\n            }).catch(() => {\r\n                this.setState({ showSuccessMessage: false })\r\n                this.setState({ hasLoginFailed: true })\r\n            })\r\n    }\r\n}\r\n\r\nexport default LoginComponent"]},"metadata":{},"sourceType":"module"}