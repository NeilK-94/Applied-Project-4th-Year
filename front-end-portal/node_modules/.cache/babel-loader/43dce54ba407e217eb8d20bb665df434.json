{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\component\\\\ListUsersComponent.jsx\";\n//  Component for listing all users\nimport React, { Component } from 'react';\nimport UserDataService from '../service/UserDataService';\n\nclass ListUsersComponent extends Component {\n  constructor(props) {\n    super(props); //  To display users, need to make them available to the component. We add users to the state of the component and initialize it in the constructor.\n\n    this.state = {\n      users: [],\n      message: null\n    };\n    this.refreshUsers = this.refreshUsers.bind(this);\n    this.deleteUserClicked = this.deleteUserClicked.bind(this);\n    this.updateUserClicked = this.updateUserClicked.bind(this);\n    this.addUserClicked = this.addUserClicked.bind(this);\n  }\n\n  componentDidMount() {\n    //  React makes componentDidMount be called as soon as the component is mounted\n    this.refreshUsers(); //  Call refreshUsers\n  }\n\n  refreshUsers() {\n    UserDataService.retrieveAllUsers() //  Make call to the REST API\n    .then( //  Decide what to do once call is made\n    response => {\n      console.log(response);\n      this.setState({\n        users: response.data\n      }); //  When response comes back with data, update the state.\n    });\n  }\n\n  deleteUserClicked(id) {\n    UserDataService.deleteUser(id).then(response => {\n      console.log(response);\n      this.setState({\n        message: \"Succesfully deleted the user posting\"\n      });\n      this.refreshUsers();\n    });\n  }\n\n  updateUserClicked(employer) {\n    this.props.history.push(\"/users/\".concat(employer));\n  }\n\n  addUserClicked() {\n    this.props.history.push(\"/users/-1\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        backgroundColor: '#ff0000'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"All Users\"), this.state.message && React.createElement(\"div\", {\n      class: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.addUserClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Add\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Employer\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"User Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Update\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Delete\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.users.map( //  map allows you to loop around items\n    user => //  a key is used to identify a row\n    React.createElement(\"tr\", {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, user.employer), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, user.userTitle), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, user.description), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.updateUserClicked(user.employer),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Update\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.deleteUserClicked(user.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Delete\")))) //  will need to change user.employer to user.id\n    ))));\n  }\n\n}\n\nexport default ListUsersComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/ListUsersComponent.jsx"],"names":["React","Component","UserDataService","ListUsersComponent","constructor","props","state","users","message","refreshUsers","bind","deleteUserClicked","updateUserClicked","addUserClicked","componentDidMount","retrieveAllUsers","then","response","console","log","setState","data","id","deleteUser","employer","history","push","render","backgroundColor","map","user","userTitle","description"],"mappings":"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","sourcesContent":["//  Component for listing all users\r\n\r\nimport React, { Component } from 'react';\r\nimport UserDataService from '../service/UserDataService';\r\n\r\nclass ListUsersComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n         //  To display users, need to make them available to the component. We add users to the state of the component and initialize it in the constructor.\r\n        this.state = { \r\n            users: [],\r\n            message: null\r\n        }\r\n        this.refreshUsers = this.refreshUsers.bind(this)\r\n        this.deleteUserClicked = this.deleteUserClicked.bind(this)\r\n        this.updateUserClicked = this.updateUserClicked.bind(this)\r\n        this.addUserClicked = this.addUserClicked.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {   //  React makes componentDidMount be called as soon as the component is mounted\r\n        this.refreshUsers(); //  Call refreshUsers\r\n    }\r\n\r\n    refreshUsers() {\r\n        UserDataService.retrieveAllUsers()    //  Make call to the REST API\r\n            .then(  //  Decide what to do once call is made\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ users: response.data })  //  When response comes back with data, update the state.\r\n                }\r\n            )\r\n    }\r\n\r\n    deleteUserClicked(id) {\r\n        UserDataService.deleteUser(id)\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ message: `Succesfully deleted the user posting` })\r\n                    this.refreshUsers()\r\n                }\r\n            )\r\n    }\r\n    updateUserClicked(employer) {\r\n        this.props.history.push(`/users/${employer}`)\r\n    }\r\n    addUserClicked() {\r\n        this.props.history.push(`/users/-1`) \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style= {{ backgroundColor: '#ff0000'}}>\r\n                <h3>All Users</h3>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                <br></br>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addUserClicked}>Add</button>\r\n                    </div>\r\n                    <br></br>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Employer</th>\r\n                                <th>User Title</th>\r\n                                <th>Description</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {   \r\n                                this.state.users.map(    //  map allows you to loop around items\r\n                                    user =>  //  a key is used to identify a row\r\n                                        <tr key={user.id}>\r\n                                            <td>{user.employer}</td>\r\n                                            <td>{user.userTitle}</td>\r\n                                            <td>{user.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateUserClicked(user.employer)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteUserClicked(user.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )   //  will need to change user.employer to user.id\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ListUsersComponent"]},"metadata":{},"sourceType":"module"}