{"ast":null,"code":"import axios from 'axios';\nimport { BASIC_AUTH_API_URL } from '../Constants';\nimport { JWT_AUTH_API_URL } from '../Constants';\nconst HEROKU_JWT_AUTHENTICATE = 'https://spring-portal-api.herokuapp.com/authenticate';\nexport const SESSION_USER_NAME = \"User\";\n\nclass AuthenticationService {\n  //  Basic Authentication *********************************\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"\".concat(BASIC_AUTH_API_URL), {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    //  Create standard authentication header. Use base63 encoding\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  } //  Basic Authentication *********************************\n\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(\"\".concat(JWT_AUTH_API_URL), {\n      username,\n      password\n    });\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } //  Add user name to session storage\n\n\n  registerLogin(username, password) {\n    sessionStorage.setItem(SESSION_USER_NAME, username);\n    this.axiosInterceptor(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(SESSION_USER_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  } //  Remove user name from session storage\n\n\n  logout() {\n    sessionStorage.removeItem(SESSION_USER_NAME);\n  }\n\n  getLoggedUser() {\n    //  Get the currently logged in user\n    let username = sessionStorage.getItem(SESSION_USER_NAME);\n    if (username === null) return '';\n    return username;\n  } //  Check if a user is logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(SESSION_USER_NAME);\n    if (user === null) return false;\n    return true;\n  } //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\n  //  The username and password are sent to it from the login \n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/service/AuthenticationService.js"],"names":["axios","BASIC_AUTH_API_URL","JWT_AUTH_API_URL","HEROKU_JWT_AUTHENTICATE","SESSION_USER_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","executeJwtAuthenticationService","post","createJWTToken","token","registerLogin","sessionStorage","setItem","axiosInterceptor","registerSuccessfulLoginForJwt","setupAxiosInterceptors","logout","removeItem","getLoggedUser","getItem","isLoggedIn","user","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,MAAMC,uBAAuB,GAAG,sDAAhC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAA1B;;AAEP,MAAMC,qBAAN,CAA4B;AACxB;AACAC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAOR,KAAK,CAACS,GAAN,WAAaR,kBAAb,GACP;AAACS,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAhB;AAAV,KADO,CAAP;AAEH;;AACDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC;AACA,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GATuB,CAUxB;;;AAEAO,EAAAA,+BAA+B,CAACR,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOR,KAAK,CAACgB,IAAN,WAAcd,gBAAd,GAAkC;AACrCK,MAAAA,QADqC;AAErCC,MAAAA;AAFqC,KAAlC,CAAP;AAIH;;AACDS,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH,GApBuB,CAsBxB;;;AACAC,EAAAA,aAAa,CAACZ,QAAD,EAAWC,QAAX,EAAoB;AAC7BY,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,iBAAvB,EAA0CG,QAA1C;AACA,SAAKe,gBAAL,CAAsB,KAAKV,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAAtB;AACH;;AAEDe,EAAAA,6BAA6B,CAAChB,QAAD,EAAWW,KAAX,EAAkB;AAC3CE,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,iBAAvB,EAA0CG,QAA1C;AACA,SAAKiB,sBAAL,CAA4B,KAAKP,cAAL,CAAoBC,KAApB,CAA5B;AACH,GA/BuB,CAgCxB;;;AACAO,EAAAA,MAAM,GAAE;AACJL,IAAAA,cAAc,CAACM,UAAf,CAA0BtB,iBAA1B;AACH;;AACDuB,EAAAA,aAAa,GAAG;AAChB;AACI,QAAIpB,QAAQ,GAAGa,cAAc,CAACQ,OAAf,CAAuBxB,iBAAvB,CAAf;AACA,QAAGG,QAAQ,KAAG,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,QAAP;AACH,GAzCuB,CA0CxB;;;AACAsB,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAGV,cAAc,CAACQ,OAAf,CAAuBxB,iBAAvB,CAAX;AAEA,QAAG0B,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH,GAhDuB,CAkDxB;AACA;;;AACAN,EAAAA,sBAAsB,CAACN,KAAD,EAAQ;AAC1BlB,IAAAA,KAAK,CAAC+B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKL,UAAL,EAAJ,EAAuB;AACnBK,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BO,KAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AAQH;;AA7DuB;;AAgE5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { BASIC_AUTH_API_URL } from '../Constants'\r\nimport { JWT_AUTH_API_URL } from '../Constants'\r\n\r\nconst HEROKU_JWT_AUTHENTICATE = 'https://spring-portal-api.herokuapp.com/authenticate'\r\n\r\nexport const SESSION_USER_NAME = \"User\"\r\n\r\nclass AuthenticationService {\r\n    //  Basic Authentication *********************************\r\n    executeBasicAuthenticationService(username, password){\r\n        return axios.get(`${BASIC_AUTH_API_URL}`,\r\n        {headers: {authorization: this.createBasicAuthToken(username, password)}});\r\n    }\r\n    createBasicAuthToken(username, password){\r\n        //  Create standard authentication header. Use base63 encoding\r\n        return \"Basic \" + window.btoa(username + \":\" + password)\r\n    }\r\n    //  Basic Authentication *********************************\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post(`${JWT_AUTH_API_URL}`, {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    //  Add user name to session storage\r\n    registerLogin(username, password){\r\n        sessionStorage.setItem(SESSION_USER_NAME, username);\r\n        this.axiosInterceptor(this.createBasicAuthToken(username, password));\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(SESSION_USER_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n    //  Remove user name from session storage\r\n    logout(){\r\n        sessionStorage.removeItem(SESSION_USER_NAME);\r\n    }\r\n    getLoggedUser() {\r\n    //  Get the currently logged in user\r\n        let username = sessionStorage.getItem(SESSION_USER_NAME)\r\n        if(username===null) return ''\r\n        return username\r\n    }\r\n    //  Check if a user is logged in\r\n    isLoggedIn(){\r\n        let user = sessionStorage.getItem(SESSION_USER_NAME);\r\n\r\n        if(user === null) return false\r\n        return true\r\n    }\r\n\r\n    //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\r\n    //  The username and password are sent to it from the login \r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}