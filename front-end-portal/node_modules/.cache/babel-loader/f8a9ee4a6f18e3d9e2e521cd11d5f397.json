{"ast":null,"code":"// import React, { Component } from 'react';\n// import JobDataService from '../service/JobDataService';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import AuthenticationService from '../service/AuthenticationService';\n// class NewJobComponent extends Component {\n//   constructor(props) {\n//       super(props)\n//       this.state = {\n//         id: this.props.match.params.id,\n//         employer: this.props.match.employer,\n//         description: ''\n//       }\n//       this.onSubmit = this.onSubmit.bind(this)\n//       this.validate = this.validate.bind(this)\n//       this.backButton = this.backButton.bind(this)\n//   }\n//   componentDidMount() {\n//     if (this.state.id == -1) {\n//         console.log(\"Not mounting, (Create job)\")\n//         return;\n//     }\n//     console.log(this.state.id)\n//     console.log(\"mounting, (Update job)\")\n//     let username = AuthenticationService.getLoggedUser()\n//     JobDataService.retrieveJob(username, this.state.id)\n//     .then(response => this.setState({\n//         description: response.data.description,\n//         employer: response.data.employer,\n//         jobTitle: response.data.jobTitle\n//         }))\n//   }\n//   //    Error handling for form\n//   validate(values) {\n//     let errors = {} //  add validation for every field!!!!!!\n//     if (!values.description) {\n//         errors.description = 'Enter a description'\n//     } else if (values.description.length < 5) {\n//         errors.description = 'Description must be at least 5 characters long'\n//     }\n//     return errors\n//   }\n//   //    When save is clicked\n//   onSubmit(values) {\n//     // let employer = this.state.employer\n//     // let id = this.state.id\n//     // let jobTitle = this.state.jobTitle\n//     let job = {\n//         id: this.state.id,\n//         employer: values.employer,\n//         jobTitle: values.jobTitle,\n//         description: values.description\n//     }\n//     //  For create, if getting promise error check params in data service. \n//     if (this.state.id === -1) {\n//         JobDataService.createJob(job.jobTitle, job.employer, this.state.id, job)\n//             .then(() => this.props.history.push('/jobs'))\n//     } else {\n//         JobDataService.updateJob(job.jobTitle, job.employer, this.state.id, job)\n//             .then(() => this.props.history.push('/jobs'))\n//     }\n//   }\n//   backButton(){\n//     this.props.history.goBack();\n//   }\n//   render() {\n//     let { description, employer, jobTitle } = this.state\n//     return (\n//         <div>            \n//             <h3>Update {this.state.employer}'s {this.state.jobTitle} Job</h3>\n//             <div className=\"container\">\n//                 <Formik\n//                     initialValues={{description: description, employer: employer, jobTitle: jobTitle}}\n//                     onSubmit={this.onSubmit}\n//                     validateOnChange={false}\n//                     validateOnBlur={false}\n//                     validate={this.validate}\n//                     enableReinitialize={true}    \n//                 >\n//                 {\n//                     (props) => (\n//                         <Form>\n//                             <ErrorMessage name=\"description\" component=\"div\"\n//                                 className=\"alert alert-warning\" />\n//                             <fieldset className=\"form-group\">\n//                                 <label>Employer</label>\n//                                 <Field className=\"form-control\" type=\"text\" name=\"employer\" />\n//                             </fieldset>\n//                             <fieldset className=\"form-group\">\n//                                 <label>Job Title</label>\n//                                 <Field className=\"form-control\" type=\"text\" name=\"jobTitle\" />\n//                             </fieldset>\n//                             <fieldset className=\"form-group\">\n//                                 <label>Description</label>\n//                                 <Field className=\"form-control\" type=\"text\" name=\"description\" />\n//                             </fieldset>\n//                             <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n//                                 <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\n//                                     <button className=\"btn btn-success\" type=\"submit\">Save</button>\n//                                 </div>\n//                                 <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\n//                                     <button className=\"btn btn-sm\" onClick={this.backButton}>Back</button>\n//                                 </div>\n//                             </div>\n//                         </Form>\n//                     )\n//                 }\n//                 </Formik>\n//             </div>\n//         </div>\n//     )\n// }\n// }\n// export default NewJobComponent","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/NewJobComponent.jsx"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import JobDataService from '../service/JobDataService';\r\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\r\n// import AuthenticationService from '../service/AuthenticationService';\r\n\r\n// class NewJobComponent extends Component {\r\n//   constructor(props) {\r\n//       super(props)\r\n\r\n//       this.state = {\r\n//         id: this.props.match.params.id,\r\n//         employer: this.props.match.employer,\r\n//         description: ''\r\n//       }\r\n//       this.onSubmit = this.onSubmit.bind(this)\r\n//       this.validate = this.validate.bind(this)\r\n//       this.backButton = this.backButton.bind(this)\r\n\r\n//   }\r\n//   componentDidMount() {\r\n//     if (this.state.id == -1) {\r\n//         console.log(\"Not mounting, (Create job)\")\r\n//         return;\r\n//     }\r\n//     console.log(this.state.id)\r\n//     console.log(\"mounting, (Update job)\")\r\n//     let username = AuthenticationService.getLoggedUser()\r\n\r\n//     JobDataService.retrieveJob(username, this.state.id)\r\n//     .then(response => this.setState({\r\n//         description: response.data.description,\r\n//         employer: response.data.employer,\r\n//         jobTitle: response.data.jobTitle\r\n//         }))\r\n//   }\r\n\r\n//   //    Error handling for form\r\n//   validate(values) {\r\n//     let errors = {} //  add validation for every field!!!!!!\r\n//     if (!values.description) {\r\n//         errors.description = 'Enter a description'\r\n//     } else if (values.description.length < 5) {\r\n//         errors.description = 'Description must be at least 5 characters long'\r\n//     }\r\n//     return errors\r\n//   }\r\n\r\n//   //    When save is clicked\r\n//   onSubmit(values) {\r\n//     // let employer = this.state.employer\r\n//     // let id = this.state.id\r\n//     // let jobTitle = this.state.jobTitle\r\n//     let job = {\r\n//         id: this.state.id,\r\n//         employer: values.employer,\r\n//         jobTitle: values.jobTitle,\r\n//         description: values.description\r\n//     }\r\n//     //  For create, if getting promise error check params in data service. \r\n\r\n//     if (this.state.id === -1) {\r\n//         JobDataService.createJob(job.jobTitle, job.employer, this.state.id, job)\r\n//             .then(() => this.props.history.push('/jobs'))\r\n//     } else {\r\n//         JobDataService.updateJob(job.jobTitle, job.employer, this.state.id, job)\r\n//             .then(() => this.props.history.push('/jobs'))\r\n//     }\r\n//   }\r\n//   backButton(){\r\n//     this.props.history.goBack();\r\n//   }\r\n\r\n//   render() {\r\n//     let { description, employer, jobTitle } = this.state\r\n//     return (\r\n//         <div>            \r\n//             <h3>Update {this.state.employer}'s {this.state.jobTitle} Job</h3>\r\n//             <div className=\"container\">\r\n//                 <Formik\r\n//                     initialValues={{description: description, employer: employer, jobTitle: jobTitle}}\r\n                    \r\n//                     onSubmit={this.onSubmit}\r\n//                     validateOnChange={false}\r\n//                     validateOnBlur={false}\r\n//                     validate={this.validate}\r\n//                     enableReinitialize={true}    \r\n//                 >\r\n//                 {\r\n//                     (props) => (\r\n//                         <Form>\r\n//                             <ErrorMessage name=\"description\" component=\"div\"\r\n//                                 className=\"alert alert-warning\" />\r\n//                             <fieldset className=\"form-group\">\r\n//                                 <label>Employer</label>\r\n//                                 <Field className=\"form-control\" type=\"text\" name=\"employer\" />\r\n//                             </fieldset>\r\n//                             <fieldset className=\"form-group\">\r\n//                                 <label>Job Title</label>\r\n//                                 <Field className=\"form-control\" type=\"text\" name=\"jobTitle\" />\r\n//                             </fieldset>\r\n//                             <fieldset className=\"form-group\">\r\n//                                 <label>Description</label>\r\n//                                 <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n//                             </fieldset>\r\n//                             <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n//                                 <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n//                                     <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n//                                 </div>\r\n//                                 <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"Second group\">\r\n//                                     <button className=\"btn btn-sm\" onClick={this.backButton}>Back</button>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </Form>\r\n//                     )\r\n//                 }\r\n//                 </Formik>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n// }\r\n// export default NewJobComponent"]},"metadata":{},"sourceType":"module"}