{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neilk\\\\eclipse-workspace\\\\Applied-Project-4th-Year\\\\front-end-portal\\\\src\\\\component\\\\JobComponent.jsx\";\nimport React, { Component } from 'react';\nimport JobDataService from '../service/JobDataService';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass JobComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      description: ''\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"ID: \" + this.state.id);\n    console.log(\"EMPLOYER: \" + this.state.employer);\n\n    if (this.state.id === -1) {\n      return;\n    }\n\n    JobDataService.retrieveJob(this.state.employer, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      employer: response.data.employer\n    }));\n  } //    Error handling for form\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = 'Enter a description';\n    } else if (values.description.length < 5) {\n      errors.description = 'Description must be at least 5 characters long';\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    let employer = this.state.employer;\n    let id = this.state.id;\n    let job = {\n      id: this.state.id,\n      employer: this.state.employer,\n      description: values.description\n    };\n\n    if (this.state.id === -1) {\n      JobDataService.createJob(employer, job).then(() => this.props.history.push('/jobs'));\n    } else {\n      JobDataService.updateJob(employer, id, job).then(() => this.props.history.push('/jobs'));\n    }\n\n    console.log(values);\n  }\n\n  render() {\n    let _this$state = this.state,\n        description = _this$state.description,\n        id = _this$state.id,\n        employer = _this$state.employer;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Update A Job\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        id: id,\n        description: description,\n        employer: employer\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Id\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"id\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Employer\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"employer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default JobComponent;","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/component/JobComponent.jsx"],"names":["React","Component","JobDataService","Formik","Form","Field","ErrorMessage","JobComponent","constructor","props","state","id","match","params","description","onSubmit","bind","validate","componentDidMount","console","log","employer","retrieveJob","then","response","setState","data","values","errors","length","job","createJob","history","push","updateJob","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AACnCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,EAAE,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,EADjB;AAEXG,MAAAA,WAAW,EAAE;AAFF,KAAb;AAIA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AACDE,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAS,KAAKV,KAAL,CAAWC,EAAhC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,KAAKV,KAAL,CAAWW,QAAtC;;AACA,QAAI,KAAKX,KAAL,CAAWC,EAAX,KAAkB,CAAC,CAAvB,EAA0B;AACtB;AACH;;AACDT,IAAAA,cAAc,CAACoB,WAAf,CAA2B,KAAKZ,KAAL,CAAWW,QAAtC,EAAgD,KAAKX,KAAL,CAAWC,EAA3D,EACCY,IADD,CACMC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAC5BX,MAAAA,WAAW,EAAEU,QAAQ,CAACE,IAAT,CAAcZ,WADC;AACYO,MAAAA,QAAQ,EAAEG,QAAQ,CAACE,IAAT,CAAcL;AADpC,KAAd,CADlB;AAIH,GArBkC,CAuBnC;;;AACAJ,EAAAA,QAAQ,CAACU,MAAD,EAAS;AACf,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,CAACD,MAAM,CAACb,WAAZ,EAAyB;AACrBc,MAAAA,MAAM,CAACd,WAAP,GAAqB,qBAArB;AACH,KAFD,MAEO,IAAIa,MAAM,CAACb,WAAP,CAAmBe,MAAnB,GAA4B,CAAhC,EAAmC;AACtCD,MAAAA,MAAM,CAACd,WAAP,GAAqB,gDAArB;AACH;;AACD,WAAOc,MAAP;AACD;;AAEDb,EAAAA,QAAQ,CAACY,MAAD,EAAS;AACf,QAAIN,QAAQ,GAAG,KAAKX,KAAL,CAAWW,QAA1B;AACA,QAAIV,EAAE,GAAG,KAAKD,KAAL,CAAWC,EAApB;AACA,QAAImB,GAAG,GAAG;AACNnB,MAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EADT;AAENU,MAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWW,QAFf;AAGNP,MAAAA,WAAW,EAAEa,MAAM,CAACb;AAHd,KAAV;;AAMA,QAAI,KAAKJ,KAAL,CAAWC,EAAX,KAAkB,CAAC,CAAvB,EAA0B;AACtBT,MAAAA,cAAc,CAAC6B,SAAf,CAAyBV,QAAzB,EAAmCS,GAAnC,EACKP,IADL,CACU,MAAM,KAAKd,KAAL,CAAWuB,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB,CADhB;AAEH,KAHD,MAGO;AACH/B,MAAAA,cAAc,CAACgC,SAAf,CAAyBb,QAAzB,EAAmCV,EAAnC,EAAuCmB,GAAvC,EACKP,IADL,CACU,MAAM,KAAKd,KAAL,CAAWuB,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB,CADhB;AAEH;;AACDd,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AAAA,sBAC6B,KAAKzB,KADlC;AAAA,QACDI,WADC,eACDA,WADC;AAAA,QACYH,EADZ,eACYA,EADZ;AAAA,QACgBU,QADhB,eACgBA,QADhB;AAEP,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,aAAa,EAAE;AAACV,QAAAA,EAAE,EAAEA,EAAL;AAASG,QAAAA,WAAW,EAAEA,WAAtB;AAAmCO,QAAAA,QAAQ,EAAEA;AAA7C,OADnB;AAEI,MAAA,QAAQ,EAAE,KAAKN,QAFnB;AAGI,MAAA,gBAAgB,EAAE,KAHtB;AAII,MAAA,cAAc,EAAE,KAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKE,QALnB;AAMI,MAAA,kBAAkB,EAAE,IANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASSR,KAAD,IACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,aAAnB;AAAiC,MAAA,SAAS,EAAC,KAA3C;AACI,MAAA,SAAS,EAAC,qBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,IAAI,EAAC,IAAjD;AAAsD,MAAA,QAAQ,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAHJ,EAOI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,IAAI,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAPJ,EAWI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,IAAI,EAAC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAXJ,EAeI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,IAAI,EAAC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ,CAVZ,CADJ,CAFJ,CADJ;AAqCH;;AA5FoC;;AA8FrC,eAAeF,YAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport JobDataService from '../service/JobDataService';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nclass JobComponent extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n\r\n      this.state = {\r\n        id: this.props.match.params.id,\r\n        description: ''\r\n      }\r\n      this.onSubmit = this.onSubmit.bind(this)\r\n      this.validate = this.validate.bind(this)\r\n  }\r\n  componentDidMount() {\r\n      console.log(\"ID: \" + this.state.id)\r\n      console.log(\"EMPLOYER: \" + this.state.employer);\r\n      if (this.state.id === -1) {\r\n          return\r\n      }\r\n      JobDataService.retrieveJob(this.state.employer, this.state.id)\r\n      .then(response => this.setState({\r\n          description: response.data.description, employer: response.data.employer\r\n          }))\r\n  }\r\n\r\n  //    Error handling for form\r\n  validate(values) {\r\n    let errors = {}\r\n    if (!values.description) {\r\n        errors.description = 'Enter a description'\r\n    } else if (values.description.length < 5) {\r\n        errors.description = 'Description must be at least 5 characters long'\r\n    }\r\n    return errors\r\n  }\r\n\r\n  onSubmit(values) {\r\n    let employer = this.state.employer\r\n    let id = this.state.id\r\n    let job = {\r\n        id: this.state.id,\r\n        employer: this.state.employer,\r\n        description: values.description\r\n    }\r\n\r\n    if (this.state.id === -1) {\r\n        JobDataService.createJob(employer, job)\r\n            .then(() => this.props.history.push('/jobs'))\r\n    } else {\r\n        JobDataService.updateJob(employer, id, job)\r\n            .then(() => this.props.history.push('/jobs'))\r\n    }\r\n    console.log(values);\r\n  }\r\n\r\n  render() {\r\n    let { description, id, employer } = this.state\r\n    return (\r\n        <div>            \r\n            <h3>Update A Job</h3>\r\n            <div className=\"container\">\r\n                <Formik\r\n                    initialValues={{id: id, description: description, employer: employer}}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}    \r\n                >\r\n                    {\r\n                        (props) => (\r\n                            <Form>\r\n                                <ErrorMessage name=\"description\" component=\"div\"\r\n                                    className=\"alert alert-warning\" />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Id</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Employer</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"employer\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Description</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default JobComponent"]},"metadata":{},"sourceType":"module"}