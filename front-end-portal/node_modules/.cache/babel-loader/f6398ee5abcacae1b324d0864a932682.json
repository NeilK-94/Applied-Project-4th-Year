{"ast":null,"code":"import axios from 'axios';\nconst BASIC_AUTH_API_URL = 'http://localhost:8080/basicauth';\nconst JWT_AUTH_API_URL = 'http://localhost:8080/authenticate';\n\nclass AuthenticationService {\n  //  Basic Authentication *********************************\n  executeBasicAuthenticationService(userName, password) {\n    return axios.get(\"\".concat(BASIC_AUTH_API_URL), {\n      headers: {\n        authorization: this.createBasicAuthToken(userName, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(userName, password) {\n    //  Create standard authentication header. Use base63 encoding\n    return \"Basic \" + window.btoa(userName + \":\" + password);\n  } //  Basic Authentication *********************************\n\n\n  executeJwtAuthenticationService(userName, password) {\n    return axios.post(\"\".concat(JWT_AUTH_API_URL), {\n      userName,\n      password\n    });\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } //  Add user name to session storage\n\n\n  registerLogin(userName, password) {\n    sessionStorage.setItem(\"User\", userName);\n    this.axiosInterceptor(this.createBasicAuthToken(userName, password));\n  }\n\n  registerSuccessfulLoginForJwt(userName, token) {\n    sessionStorage.setItem(\"User\", userName);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  } //  Remove user name from session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"User\");\n  }\n\n  getLoggedUser() {\n    //  Get the currently logged in user\n    let userName = sessionStorage.getItem(\"User\");\n    if (userName === null) return '';\n    return userName;\n  } //  Check if a user is logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"User\");\n    if (user === null) return false;\n    return true;\n  } //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\n  //  The username and password are sent to it from the login \n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/neilk/eclipse-workspace/Applied-Project-4th-Year/front-end-portal/src/service/AuthenticationService.js"],"names":["axios","BASIC_AUTH_API_URL","JWT_AUTH_API_URL","AuthenticationService","executeBasicAuthenticationService","userName","password","get","headers","authorization","createBasicAuthToken","window","btoa","executeJwtAuthenticationService","post","createJWTToken","token","registerLogin","sessionStorage","setItem","axiosInterceptor","registerSuccessfulLoginForJwt","setupAxiosInterceptors","logout","removeItem","getLoggedUser","getItem","isLoggedIn","user","interceptors","request","use","config","isUserLoggedIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAG,iCAA3B;AACA,MAAMC,gBAAgB,GAAG,oCAAzB;;AAEA,MAAMC,qBAAN,CAA4B;AACxB;AACAC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAON,KAAK,CAACO,GAAN,WAAaN,kBAAb,GACP;AAACO,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAhB;AAAV,KADO,CAAP;AAEH;;AACDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC;AACA,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GATuB,CAUxB;;;AAEAO,EAAAA,+BAA+B,CAACR,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAON,KAAK,CAACc,IAAN,WAAcZ,gBAAd,GAAkC;AACrCG,MAAAA,QADqC;AAErCC,MAAAA;AAFqC,KAAlC,CAAP;AAIH;;AACDS,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH,GApBuB,CAsBxB;;;AACAC,EAAAA,aAAa,CAACZ,QAAD,EAAWC,QAAX,EAAoB;AAC7BY,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+Bd,QAA/B;AACA,SAAKe,gBAAL,CAAsB,KAAKV,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAAtB;AACH;;AAEDe,EAAAA,6BAA6B,CAAChB,QAAD,EAAWW,KAAX,EAAkB;AAC3CE,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+Bd,QAA/B;AACA,SAAKiB,sBAAL,CAA4B,KAAKP,cAAL,CAAoBC,KAApB,CAA5B;AACH,GA/BuB,CAgCxB;;;AACAO,EAAAA,MAAM,GAAE;AACJL,IAAAA,cAAc,CAACM,UAAf,CAA0B,MAA1B;AACH;;AACDC,EAAAA,aAAa,GAAG;AAChB;AACI,QAAIpB,QAAQ,GAAGa,cAAc,CAACQ,OAAf,CAAuB,MAAvB,CAAf;AACA,QAAGrB,QAAQ,KAAG,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,QAAP;AACH,GAzCuB,CA0CxB;;;AACAsB,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAGV,cAAc,CAACQ,OAAf,CAAuB,MAAvB,CAAX;AAEA,QAAGE,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH,GAhDuB,CAkDxB;AACA;;;AACAN,EAAAA,sBAAsB,CAACN,KAAD,EAAQ;AAE1BhB,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKC,cAAL,EAAJ,EAA2B;AACvBD,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BO,KAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AAQH;;AA9DuB;;AAiE5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst BASIC_AUTH_API_URL = 'http://localhost:8080/basicauth'\r\nconst JWT_AUTH_API_URL = 'http://localhost:8080/authenticate'\r\n\r\nclass AuthenticationService {\r\n    //  Basic Authentication *********************************\r\n    executeBasicAuthenticationService(userName, password){\r\n        return axios.get(`${BASIC_AUTH_API_URL}`,\r\n        {headers: {authorization: this.createBasicAuthToken(userName, password)}});\r\n    }\r\n    createBasicAuthToken(userName, password){\r\n        //  Create standard authentication header. Use base63 encoding\r\n        return \"Basic \" + window.btoa(userName + \":\" + password)\r\n    }\r\n    //  Basic Authentication *********************************\r\n\r\n    executeJwtAuthenticationService(userName, password) {\r\n        return axios.post(`${JWT_AUTH_API_URL}`, {\r\n            userName,\r\n            password\r\n        })\r\n    }\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    //  Add user name to session storage\r\n    registerLogin(userName, password){\r\n        sessionStorage.setItem(\"User\", userName);\r\n        this.axiosInterceptor(this.createBasicAuthToken(userName, password));\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(userName, token) {\r\n        sessionStorage.setItem(\"User\", userName)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n    //  Remove user name from session storage\r\n    logout(){\r\n        sessionStorage.removeItem(\"User\");\r\n    }\r\n    getLoggedUser() {\r\n    //  Get the currently logged in user\r\n        let userName = sessionStorage.getItem(\"User\")\r\n        if(userName===null) return ''\r\n        return userName\r\n    }\r\n    //  Check if a user is logged in\r\n    isLoggedIn(){\r\n        let user = sessionStorage.getItem(\"User\");\r\n\r\n        if(user === null) return false\r\n        return true\r\n    }\r\n\r\n    //  This function intercepts all axios request being sent to the backend and adds an authorization header to it\r\n    //  The username and password are sent to it from the login \r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}